{
  "title": "JOBFLEX",
  "term": "2020.03 ~ ",
  "info": {
    "link": "https://www.jobflex.com/",
    "client": "마이다스아이티",
    "role": "Front-End 개발(총 4명)",
    "devenv": "React, TypeScript, Mobx, Webpack, Canvas",
    "category": "WEBSITE, WEBSOLUTION"
  },
  "thumbnailType": "left",
  "thumbnail": ["/resource/img/thumbnail/jobflex1.png", "/resource/img/thumbnail/jobflex2.png", "/resource/img/thumbnail/jobflex3.png"],
  "introduce": "<p>구직자와 기업의 연결과 채용을 위한 플랫폼인 JOBFLEX를 4월에 출시하였습니다. <br/>현재는 코로나로 인해 채용설명회를 진행할 수 없는 기업들의 온라인 채용 설명회를 개최하고 있으며, 향후 지속적인 업데이트를 통해 채용 시장을 이끄는 플랫폼을 만드는 것이 목표입니다</p>",
  "result": "<p>저는 로그인/회원가입과 메인 비주얼 및 팝업, 이벤트 페이지 등 구직자 사이트의 전반적인 프론트 작업을 담당하고 있습니다. </p> <h2>로그인/회원가입</h2> <p>JOBFLEX의 로그인/회원가입은 언제 어디서든 편하고 쉽게 가입할 수 있도록 모달 형태로 기획되었습니다.<br/>기존의 웹사이트와는 다르게 이메일(아이디)을 먼저 입력 받아 회원인지 판단 후 회원이면 로그인을, 비회 원이면 회원가입을 진행하는 독특한 구조였습니다.</p> <p>로그인/회원가입을 구현하며 어려웠던 점은 크게 세 가지였습니다</p> <ul> <li>하나의 모달 안에서 이루어지는 로직이 복잡하고 각 단계별 진행 상태에 따른 화면 전환을 어떻 게 보여줄 것인가</li> <li>카카오톡 회원가입 시 카카오 인증 완료 후(인증 페이지 이동된 상태) JOBFLEX 페이지로 돌아와 어떻게 다음 단계를 진행할 수 있을 것인가</li> <li>모달을 공통 컴포넌트로 사용하기 위해 어떻게 구현하는 것이 좋을까</li> </ul> <h3>로그인 로직 이해 및 상태 설계</h3> <p>우선 기획서를 바탕으로 로그인/회원가입 로직을 도식화하였습니다. 복잡한 로그인/회원가입 진행 과정을 한눈에 보기 위함도 있지만 추후에 다른 분이 유지보수를 할 때 빠르게 이해하실 수 있도록 정리하였습니 다.</p> <figure><img src=\"/resource/img/jobflexImg1.png\" alt=\"로그인 플로우\"/></figure> <p>또한, 로그인 모달 안에서 필요한 상태 값들을 정리하였습니다.</p> <ul> <li>로그인 진행 상태 (모달 내 화면 전환하기 위해)</li> <li>휴대폰 인증 상태 (휴대폰번호 입력 필드와 인증 버튼 등 disabled 처리 및 인증 결과 따라 회원가입 가능 여부 판단)</li> <li>모달 열림 / 닫힘 상태</li> </ul> <figure><img src=\"/resource/img/jobflexImg2.png\" alt=\"로그인 관련 State 정리\"/></figure> <p>로그인 진행 상태를 관리하는 Router와 진행 상태에 따른 화면을 정의해둔 LoginContent 를 통해 하나의 모달 안에서 로그인/회원가입이 단계별로 실행되도록 구현하였습니다.</p> <h3>카카오 회원가입</h3> <p>카카오 회원가입을 클릭하면 카카오 auth 페이지로 이동하여 계정 정보를 입력한 후 다시 JOBFLEX로 돌아오게 됩니다. 이 때, URL의 queryString형태로 전달받은 계정 정보를 URL에서 지우고 로그인/회원가입 모달창을 띄워 카카오 회원가입 상태로 전환하여 입력 필드에 해당 정보를 주입해야 하는 어려움이 있었습니다.</p> <p>URL에서 queryString을 제거하기 위해 location.href를 변경하면 새로고침 되어 파싱한 정보들과 회원가입 모달창이 사라지게 됩니다. 이를 막기 위해 History API의 pushState를 이용하였습니다. 또한, queryString에 카카오 회원가입 정보가 포함되어 있으면 필요한 정보 파싱 및 회원가입 모달창을 띄워 정보를 주입할 수 있도록 LoginModalWatcher를 만들었습니다. 아쉬운 점은 바쁘게 구현하면서 카카오 회원가입에 관련된 기능만 구현했었는데, 앞으로 페이스북, 네이버 등 다른 소셜 회원가입 기능이 들어올 가능성을 염두해두고 확장성 있게 사용할 수 있도록 리팩토링이 필요합니다.</p> <h3>모달을 공통 컴포넌트로 구현하기</h3> <p>로그인/회원가입 이외에도 다른 페이지들에서 모달이 사용될 것 같아 기능 설계 시 모달의 열림 닫힘 상태를 변경할 수 있는 메서드와 모달 내의 컴포넌트들은 child props로 설정할 수 있도록 구현하였습니다. 하지만 모달 디자인이 조금씩 달라 스타일을 변경할 수 있는 props를 추가하거나 모달이 닫힐 때 파라미터로 콜백을 받아 실행할 수 있도록 하는 등 예외 사항들이 계속 발생하면서 공통 컴포넌트를 구현한다는 것은 어느 범위까지 공통으로 구현해두는 것이 좋은 것인가를 고민하게 되었습니다. 현재 모달은 파트장님과 논의 끝에 props로 받고 있던 옵션들을 모달 인스턴스 생성 시 파라미터로 옵션값을 받고, 모달이 닫힐 때 콜백으로 보내던 예외 기능들은 모달 닫힘 메서드를 view에서 직접 호출하도록 변경되었습니다.</p> <p>아직 정확한 정답은 모르겠지만 모달을 통해 공통 컴포넌트일수록 변경이 필요한 옵션들이나 기능들을 해당 컴포넌트 내에서 실행하기 위해 파라미터나 props로 제공하기 보다는 컴포넌트를 사용하는 view에서 직접 컴포넌트 기능을 컨트롤할 수 있도록 메서드나 option을 열어두는 것이 좀 더 유연하겠다고 생각하였습니다.</p> <h3>로그인 / 회원가입 구현하며 아쉬웠던 점</h3> <p>회원가입 폼을 구현할 때 유효성 검사와 에러 메시지를 출력이 용이한 react-hook-form 패키지를 이용하였습니다. 하지만 아쉬운 점이 있었는데</p> <ul> <li>onSubmit/onChange 등 유효성 검증 실행 시점 이벤트를 설정해두면 해당 폼 안의 모든 필드는 동일한 시점에 검증됨</li> <li>에러 메시지만 제공해주고 있어서 Toast UI를 통해 성공 메시지 등을 보여주고 있음</li> <li>Checkbox/Radio 등 react-hook-form 에 이슈 존재</li> </ul> <p>UI/UX 글들을 찾아보며 각 필드의 내용에 따라 검증 시점이 달라져야 하고, 사용자에게 에러 메시지를 지속적으로 띄우면 위화감을 느낄 수 있으므로 메시지 속성에 따라 텍스트 색상과 아이콘 등이 다르게 안내되어야 함을 알았습니다. 이를 구현하기 위해선 react-hook-form을 커스터 마이징 하거나 새로운 폼 유틸을 개발하는 것이 필요한데 새로운 폼 유틸을 개발하는 방향으로 고안 중입니다.</p>",
  "experience": "<h2>React에 대한 인식 개선</h2> <p>React를 사용해보면서 상태 관리를 통해 리렌더링 되는 점이 좋았고 컴포넌트 단위의 설계를 통해 재활용성에 대한 고민도 깊게 해볼 수 있었던 점이 좋았습니다. 모션을 주거나 DOM 엘리먼트에 접근하는 작업에 대한 우려도 있었는데 Ref를 지원해주어 그런 걱정도 사라졌습니다.</p> <p>다만, 폼을 사용할 때 value 값을 state로 관리해주지 않으면 readOnly가 되거나 사용할 수 없게 되어 손이 많이 가는 작업이었지만, 데이터 저장할 때 value값들을 DOM에서 추출하지 않아도 state를 묶어 보내면 되므로 DOM 접근 비용이 줄고 편한 장점이 있었습니다.</p> <p>또한, 컴포넌트 단위로 설계하면서 어떻게 설계하면 재활용에 용이할까 등 고민하게 되었는데 지금 프로젝트의 경우 디자인이 공통화되지 못하여 재활용할 수 있는 컴포넌트가 많지 않고 모달의 경우처럼 공통화하려 할수록 다른 동료들이 사용하기에 어려움이 없는가에 대한 고민도 함께하게 되었습니다.</p> <h2>MVVM 패턴 설계 도전</h2> <p>JOBFLEX는 MVVM 패턴으로 설계되었으며, 디자인 패턴을 도입하여 설계하는 것은 처음이었기에 인터넷 강의와 여러 글들을 참고하며 작업하였습니다. 자신이 잘 설계하고 있는가에 대해 의문이 들었고 파트장님과 동료들에게 여쭤보며 스스로 정리된 개념은 Model과 View는 서로 모르고 그 중간을 ViewModel이 연결해준다는 것입니다. View에서는 여러 ViewModel을 연결할 수 있으며 Form 요소들처럼 View에서 변경되는 데이터들은 ViewModel을 통해 Model에도 값이 변경됩니다.</p> <p>Model은 데이터를 관리하는 역할을 하며 데이터 조회, 변경 등 기능을 메서드로 가집니다. JOBFLEX에선 ValueObject라는 개념을 두어 API 통신할 때 파라미터로 보내는 순수 데이터를 Rq(Request), 전달받는 순수 데이터를 Rs(Response), 갱신될 수 있는 데이터는 VO(ValueObject)로 분류하였습니다. Rq, Rs의 경우 getter/setter가 존재하지 않고 인스턴스 생성 시 Constructor의 parameter로 값을 받아 생성되는 데이터 객체이며, VO는 getter/setter가 존재하여 값이 갱신될 수 있습니다. </p> <p>이렇게 분류하였을 때 장점은 데이터가 로직과 분리되어 있어 API 필드명이 바뀌는 등의 변화가 있을 때 데이터 객체만 수정해도 되는 점과 데이터를 정의한 객체들을 재활용할 수 있다는 점이었습니다. 또한, 데이터 객체에서 타입도 정의해두었기 때문에 혹시나 다른 타입의 값이 들어오면 검증이 가능하기도 했습니다. 단점은 여러 단계를 거치기 때문에 작업 속도나 불필요하게 생각되는 작업들이 늘어났는데 이는 구직자 쪽보다는 폼 요소 및 CRUD 작업이 많은 관리자 쪽에서 발생하였습니다. 하지만 단점보다는 장점이 많은 구조라고 생각했고 데이터를 구조화하고 검증하는 부분에 취약했었기에 이런 작업들에 어려움이 많았지만 차츰 적응해나가고 있습니다.</p> <p>VM(ViewModel)의 경우 Model과 View의 연결 뿐만 아니라 View에서만 필요로 하는 상태 값들을 정의해두었는데, 예를 들어 모달의 열고 닫힌 상태나 로그인 진행상태처럼 백에서 전달받는 데이터는 아니지만 프론트에서만 필요로하는 상태값들이 그 예입니다. 이를 통해 디자인이나 View 구조는 다르지만 기능 로직과 데이터 구조가 동일한 경우 ViewModel과 Model만 컴포넌트화 하여 재활용할 수 있게 되었습니다. </p> <p>아직은 많이 부족하지만 inAIR, JOBFLEX 작업을 진행하며 데이터 구조를 설계하고 이를 어떻게 View와 연결할 것인가 생각하는 것이 재밌어졌고, 좀 더 다양한 기능과 페이지들에 적용해보고 싶습니다.</p> <h2>미미한 타입스크립트 사용과 테스트 툴을 이용하지 못한 아쉬움</h2> <p>타입스크립트 역시 이번 프로젝트에서 처음 사용해보았는데, 아직 제대로 사용한다고는 할 수 없습니다. Props나 api 통신할 때 주고받는 데이터에 대한 인터페이스 등 데이터 타입 검증에서 주로 사용하고 있습니다. 여러 사람들이 작업하게 되는 공통 모듈이나 컴포넌트들의 타입 설정이 중요함을 알게 되었고, 여러 곳에서 공통적으로 쓰이는 타입들은 공통으로 정의하여 사용하는 것이 더 좋을 것 같다고 생각했습니다. 지금은 각자 작업하고 있는 곳마다 타입이 혼재되어있어 이를 정리하고 재정의해보려고 합니다.</p> <p>또한, 테스트 툴을 써보지 못한 아쉬움이 있어 다음 스프린트 진행할 때에는 테스트 툴을 이용해보려고 합니다. Storybook을 통해 UI 정리 및 테스트를 진행해보고자 하며 Mocha를 이용해 테스트를 진행해보고자 합니다.</p> ",
  "next": {
    "name": "inAIR 구축/유지보수",
    "link": "/project/detail/inair"
  }
}