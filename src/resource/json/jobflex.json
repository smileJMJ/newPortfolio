{
  "title": "JOBFLEX",
  "term": "2020.03 ~ ",
  "info": {
    "link": "https://www.jobflex.com/",
    "client": "마이다스아이티",
    "role": "Front-End 개발(총 4명)",
    "devenv": "React, TypeScript, Mobx, Webpack, Canvas",
    "category": "WEBSITE, WEBSOLUTION"
  },
  "thumbnailType": "left",
  "thumbnail": ["/resource/img/thumbnail/jobflex1.png", "/resource/img/thumbnail/jobflex2.png", "/resource/img/thumbnail/jobflex3.png"],
  "introduce": "<p>구직자와 기업의 연결과 채용을 위한 플랫폼인 JOBFLEX를 4월에 출시하였습니다. <br/>MVVM 패턴을 기반으로 React, TypeScript로 개발하였으며 상태 관리는 Mobx를 이용하였습니다.</p>",
  "result": "<p>저는 JOBFLEX 프로젝트에서 아래와 같은 작업을 담당하였습니다.</p><h3>1. 공통 컴포넌트 설계 및 개발</h3><ul><li>모달, 휴대폰 SMS 인증, 본인인증(아직 미오픈), 탭, 페이지네이션 등</li></ul><h3>2. 기능 및 페이지 개발 </h3><ul><li>로그인, 회원가입, 메인 팝업 기능 개발</li><li>이벤트, FAQ, 금융권 공동채용 박람회 페이지 개발</li></ul><h3>3. 인터랙션 작업</h3><ul><li>FAQ 페이지의 배경(Pixi.js)</li><li>금융권 공동채용 박람회 페이지 모션 작업</li></ul><h2>[1] 공통 컴포넌트 설계 및 개발 – 모달 컴포넌트 구현하기</h2><p>모달 컴포넌트는 로그인/회원가입 이외에도 다른 페이지들에서 자주 사용될 것 같아 기능 설계 시 모달의 열림 닫힘 상태를 변경할 수 있는 close, open() 메서드와 모달 안에 들어올 컴포넌트들은 child props로 주입할 수 있도록 구현하였습니다. 하지만, 모달 디자인이 조금씩 달라지면서 스타일을 변경할 수 있는 props를 추가하거나 모달이 닫힐 때 파라미터로 콜백을 받아 실행할 수 있도록 하는 등 예외 사항들이 계속 발생하면서 공통 컴포넌트를 구현한다는 것은 어느 범위까지 공통으로 구현해두는 것이 좋은 것인가를 고민하게 되었습니다. 파트장님과 논의 끝에 props로 받고 있던 옵션들을 모달 인스턴스 생성 시 파라미터로 옵션값을 받고, 모달이 닫힐 때 콜백으로 보내던 예외 기능들은 모달 닫힘 메서드를 view에서 직접 호출하도록 변경하였습니다.</p><p>모달 작업을 통해 공통 컴포넌트일수록 변경이 필요한 옵션들이나 기능들을 해당 컴포넌트 내에서 실행하기 위해 파라미터나 props로 제공하기보다는 컴포넌트를 사용하는 view에서 직접 컴포넌트 기능을 컨트롤할 수 있도록 메서드나 option을 열어두는 것이 좀 더 유연하겠다고 생각하였습니다.</p><h2>(2) 기능 및 페이지 개발 – 로그인 / 회원가입 기능 개발</h2><p>로그인/회원가입은 편하고 쉽게 가입할 수 있도록 모달 형태로 기획되었으며, 이메일(아이디)을 먼저 입력받아 회원인지 판단 후 회원이면 로그인을, 비회원이면 회원가입을 진행하는 구조였습니다. </p><p>먼저 하나의 모달 안에서 로그인/회원가입을 위한 여러 로직이 존재하므로, 전체 기능의 스펙을 한눈에 볼 수 있도록 유저 플로우를 기반으로 도식화하였습니다.</p><figure><img src=\"/resource/img/jobflexImg1.png\" alt=\"로그인 플로우\"/></figure><p>또한, 로그인 모달 안에서 필요한 상태 값들을 정리하였습니다.</p><ul><li>로그인 진행 상태 (모달 내 화면 전환하기 위해)</li><li>휴대폰 인증 상태 (휴대폰번호 입력 필드와 인증 버튼 등 disabled 처리 및 인증 결과 따라 회원가입 가능 여부 판단)</li><li>모달 열림 / 닫힘 상태</li></ul><p>각 상태 값들을 Mobx로 관리하여 값의 변화를 감지하였고, 로그인 진행 상태 값의 경우 진행 상태가 변함에 따라 해당 view를 모달의 child props로 주입하여 하나의 모달 안에서 로그인/회원가입이 단계별로 실행되도록 구현하였습니다.</p><figure><img src=\"/resource/img/jobflexImg2.png\" alt=\"로그인 관련 State 정리\"/></figure><h2>(3) 인터랙션 작업 – FAQ 페이지의 배경 (Pixi.js), 금융권 공동채용 박람회 페이지 모션 작업</h2><p>FAQ의 검색창 뒤의 배경은 Pixi.js라는 라이브러리를 이용하여 Canvas로 구현하였습니다. 회색의 큰 원형을 따라 원과 사각형을 움직이게 하는 것이 제일 어려웠는데, 중심점을 기준으로 원호를 따라서 도는 것처럼 보일 수 있도록 sin, cos을 이용하여 좌표 계산 공식을 직접 구해보고 테스트하며 올바른 공식을 찾을 수 있었습니다. 또한, 사각형의 경우 중심을 향해 어색함 없이 움직이도록 이동하는 각도에 45도를 더하여 자연스러운 느낌을 주었습니다.</p><p>금융권 공동채용 박람회 소개 페이지의 경우 각 영역에 스크롤이 도달했을 때 해당 모션들이 실행되는 parallax 형태로 작업하였습니다. 어려웠던 점은 각각 컴포넌트로 구성된 영역들의 모션을 어떻게 구현할 것인가와 스크롤이 도달했을 때 어떻게 실행할 것인가였습니다.</p><p>컴포넌트들이 하나의 페이지를 이루어 스크롤 이벤트 발생 시 각 영역의 모션을 실행해야 하므로 모션을 하나의 Map으로 관리하였으며, useEffect를 이용해 컴포넌트가 Mount 되면 영역의 절대위치와 높이, Ref 값 등 모션 실행에 필요한 값들을 모션 객체에 등록하였습니다. </p><p>이렇게 모든 영역의 모션을 등록하여 스크롤 이벤트가 발생할 때마다 현재 스크롤이 몇 번째 영역에 위치하는지를 판단 후 모션 객체에 등록한 해당 영역의 모션 함수를 실행합니다. 또한, 모션 객체를 활용하여 우측의 플로팅 메뉴처럼 버튼을 클릭하면 해당 영역으로 스크롤을 이동시킬 수 있도록 구현하였습니다.</p><p>jQuery에서는 DOM 객체를 selector로 등록해서 사용했다면 React에서는 Ref를 참조하여 사용하듯이 방법이 조금 다를 수는 있지만, 기존 모션 작업과 크게 다른 점 없이 구현할 수 있어서 react에서도 퀄리티있는 인터랙션 작업을 구현할 수 있겠다고 생각하였습니다.</p>",
  "experience": "<ul><li>React에 대한 인식 개선</li><li>MVVM 패턴 설계 도전</li><li>타입스크립트의 필요성</li></ul><h2>(1) React에 대한 인식 개선</h2><p>jQuery를 오래 사용해오면서 처음 React를 도입할 때에는 걱정과 설렘이 공존하였습니다. 하지만, React를 사용하면서 상태 관리를 통해 리렌더링 되는 점과 컴포넌트 단위의 설계를 통해 재활용이 가능하고 효율적인 개발이 가능하다는 점이 좋았습니다. 모션을 주거나 DOM 엘리먼트에 접근하는 작업에 대한 우려도 있었는데 Ref를 지원해주어 그런 걱정도 사라졌습니다. </p><p>다만, JOBFLEX의 경우 디자인이 공통화되지 못하여 재활용할 수 있는 컴포넌트가 많지 않았고, 모달의 경우처럼 공통화하려 할수록 다른 동료들이 사용하기에 어려움이 없는가에 대한 고민도 함께하게 되었습니다. 컴포넌트의 설계에 대한 글과 사례를 찾아보며 최적의 구조를 찾는 것이 React를 사용하면서 가져가야 할 하나의 과제가 아닐까 생각하였습니다.</p><h2>(2) MVVM 패턴 설계 도전</h2><p>JOBFLEX는 MVVM 패턴으로 설계되었으며, 디자인 패턴을 도입하여 설계하는 것은 처음이었기에 인터넷 강의와 여러 글을 참고하며 작업하였습니다. 특히 Model, ViewModel 간의 관계와 역할을 명확히 하는 것에 어려움이 있었지만, 주변의 동료들에게 물어보고 찾아보며 스스로 개념을 정리해보았습니다.</p><p>Model은 데이터를 관리하는 역할을 하며 데이터 조회, 변경 등 기능을 메서드로 가집니다. ViewModel의 경우 Model과 View의 연결뿐만 아니라 View에서만 필요로 하는 상태 값들을 정의해두었는데, 예를 들어 모달의 열고 닫힌 상태나 로그인 진행상태처럼 백에서 전달받는 데이터는 아니지만 프론트에서만 필요로하는 상태 값들이 그 예입니다. 이를 통해 디자인이나 View 구조는 다르지만, 기능 로직과 데이터 구조가 동일한 경우 ViewModel과 Model만 컴포넌트화하여 재활용할 수 있게 되었습니다.</p><p>아직은 많이 부족하지만 inAIR와 JOBFLEX 작업을 진행하며 데이터 구조를 설계하고 이를 어떻게 View와 연결할 것인가 생각하는 것이 재밌어졌고, 좀 더 다양한 기능과 페이지들에 적용해보고 싶습니다.</p><h2>(3) 타입스크립트의 필요성</h2><p>타입스크립트 역시 이번 프로젝트에서 처음 사용해보았는데, Props나 API 통신할 때 주고받는 데이터에 대한 인터페이스 등 데이터 타입 검증에서 주로 사용하였습니다. 여러 사람들이 작업하게 되는 공통 모듈이나 컴포넌트들의 타입 설정이 중요함을 알게 되었고, 여러 곳에서 공통으로 쓰이는 타입들은 공통으로 정의하여 사용하는 것이 더 좋을 것 같다고 생각했습니다. 코드를 리팩토링하며 컴포넌트별로 타입을 정의하는 type 폴더를 만들고, repository, model, viewModel 등에 혼재되어있던 타입들을 전부 type 폴더에 정의하였으며, 이미지 객체처럼 공통으로 쓰이는 데이터 타입들은 공통 type 폴더에 정의해두었습니다.</p>",
  "next": {
    "name": "inAIR 구축/유지보수",
    "link": "/project/detail/inair"
  }
}